import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import os
from bs4 import BeautifulSoup, NavigableString
import json
import telegram
from config import TOKEN
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–∑–º–µ–Ω—è–µ–º –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
HTML_DIR = os.path.dirname(os.path.abspath(__file__))
STORIES_DIR = os.path.join(HTML_DIR, 'stories')

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
RATINGS_FILE = 'ratings.json'

def load_ratings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(RATINGS_FILE):
        with open(RATINGS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_ratings(ratings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤ —Ñ–∞–π–ª"""
    with open(RATINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(ratings, f, ensure_ascii=False, indent=2)

def get_average_rating(story_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–∞"""
    ratings = load_ratings()
    if story_id in ratings and 'votes' in ratings[story_id]:
        votes = ratings[story_id]['votes']
        if votes:
            return sum(votes) / len(votes), len(votes)
    return 0, 0

def create_rating_keyboard(story_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏"""
    avg_rating, votes = get_average_rating(story_id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –æ—Ç –∫–∞–∫–∞—à–∫–∏ –¥–æ –¥–æ–≤–æ–ª—å–Ω–æ–≥–æ
    rating_symbols = {
        1: "üí©",
        2: "üòï",
        3: "üòê",
        4: "üôÇ",
        5: "üòä"
    }
    
    keyboard = [
        [
            InlineKeyboardButton(rating_symbols[1], callback_data=f"rate_{story_id}_1"),
            InlineKeyboardButton(rating_symbols[2], callback_data=f"rate_{story_id}_2"),
            InlineKeyboardButton(rating_symbols[3], callback_data=f"rate_{story_id}_3"),
            InlineKeyboardButton(rating_symbols[4], callback_data=f"rate_{story_id}_4"),
            InlineKeyboardButton(rating_symbols[5], callback_data=f"rate_{story_id}_5")
        ],
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º dummy_ –≤ callback_data –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        [InlineKeyboardButton(
            f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f} {rating_symbols[round(avg_rating)] if avg_rating > 0 else 'ü§î'} ({votes} –≥–æ–ª–æ—Å–æ–≤)", 
            callback_data=f"dummy_{story_id}"
        )],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_html_files():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ HTML —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ stories –∏ –∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
    files = {}
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é stories, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(STORIES_DIR):
        os.makedirs(STORIES_DIR)
        
    for filename in os.listdir(STORIES_DIR):
        if filename.endswith('.html'):
            file_path = os.path.join(STORIES_DIR, filename)
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    soup = BeautifulSoup(file, 'html.parser')
                    title = soup.find('title')
                    if title:
                        button_text = title.text.split(': ')[-1]
                        files[filename[:-5]] = button_text
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
    return files

def create_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ HTML —Ñ–∞–π–ª–∞"""
    files = get_html_files()
    keyboard = []
    row = []
    
    logging.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {files}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥
    
    for callback_data, button_text in files.items():
        logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: callback={callback_data}, text={button_text}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
        if len(button_text) > 20:
            if row:  # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π —Ä—è–¥, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                keyboard.append(row)
                row = []
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        else:
            row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
            if len(row) == 2:  # –ï—Å–ª–∏ –≤ —Ä—è–¥—É –¥–≤–µ –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard.append(row)
                row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    if row:
        keyboard.append(row)
    
    logging.info(f"–°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥
    return keyboard

def process_element(element, level=0):
    if isinstance(element, NavigableString):
        return element.strip()
    
    text = ""
    if element.name == 'h1':
        text += f"<b>{element.get_text(strip=True)}</b>\n\n"
    elif element.name == 'h2':
        text += f"<b>{element.get_text(strip=True)}</b>\n\n"
    elif element.name == 'h3':
        text += f"<i>{element.get_text(strip=True)}</i>\n\n"
    elif element.name == 'p':
        if element.find(['strong', 'em']):
            for child in element.children:
                if child.name == 'strong':
                    text += f"<b>{child.get_text(strip=True)}</b>"
                elif child.name == 'em':
                    text += f"<i>{child.get_text(strip=True)}</i>"
                elif isinstance(child, NavigableString):
                    text += child.strip()
        else:
            text += element.get_text(strip=True)
        text += "\n\n"
    elif element.name == 'li':
        indent = "  " * level
        if element.find(['ul', 'ol']):
            text += f"{indent}‚Ä¢ {element.find(text=True, recursive=False).strip()}\n"
            for child in element.children:
                if child.name in ['ul', 'ol']:
                    text += process_element(child, level + 1)
        else:
            text += f"{indent}‚Ä¢ {element.get_text(strip=True)}\n"
    elif element.name in ['ul', 'ol']:
        for child in element.children:
            if child.name == 'li':
                text += process_element(child, level)
        if level == 0:
            text += "\n"
    
    return text

def read_html_file(file_path):
    try:
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {file_path}")
        
        if not os.path.exists(file_path):
            logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        with open(file_path, 'r', encoding='utf-8') as file:
            soup = BeautifulSoup(file, 'html.parser')
            
            # –î–ª—è index_bot.html –∏—â–µ–º section —Å –∫–ª–∞—Å—Å–æ–º task-description
            if os.path.basename(file_path) == 'index_bot.html':  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'index.html' –Ω–∞ 'index_bot.html'
                content = soup.find('section', class_='task-description')
            else:
                # –î–ª—è —Ñ–∞–π–ª–æ–≤ –∏—Å—Ç–æ—Ä–∏–π –∏—â–µ–º div —Å –∫–ª–∞—Å—Å–æ–º story-content
                content = soup.find('div', class_='story-content')
            
            if not content:
                logging.error(f"–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ: {file_path}")
                return "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            text = ""
            for element in content.find_all(['h1', 'h2', 'h3', 'p', 'ul', 'ol'], recursive=False):
                text += process_element(element)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            lines = text.splitlines()
            cleaned_lines = []
            previous_line_empty = False
            for line in lines:
                if line.strip():
                    cleaned_lines.append(line.rstrip())
                    previous_line_empty = False
                elif not previous_line_empty:
                    cleaned_lines.append("")
                    previous_line_empty = True
            
            result = "\n".join(cleaned_lines).strip()
            logging.info(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω —Ñ–∞–π–ª: {file_path}")
            return result or "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–æ", callback_data='random'),
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data='select')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_random_story():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–ª—É—á–∞–π–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏"""
    files = get_html_files()
    if not files:
        return None
    return random.choice(list(files.keys()))

async def show_main_menu(update_or_query):
    reply_markup = create_main_keyboard()
    description = read_html_file(os.path.join(HTML_DIR, 'index_bot.html'))
    if isinstance(update_or_query, Update):
        await update_or_query.message.reply_text(description, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update_or_query.edit_message_text(description, reply_markup=reply_markup, parse_mode='HTML')

async def show_stories_menu(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–π"""
    keyboard = create_keyboard()
    reply_markup = InlineKeyboardMarkup(keyboard + [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main')]])
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é:",
        reply_markup=reply_markup
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_main_menu(update)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data}")
    
    try:
        if query.data == 'main':
            await query.answer()
            logging.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await show_main_menu(query)
        elif query.data == 'random':
            await query.answer()
            story_id = get_random_story()
            if not story_id:
                await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π")
                return
                
            file_path = os.path.join(STORIES_DIR, f"{story_id}.html")
            text = read_html_file(file_path)
            
            try:
                await query.edit_message_text(
                    text=text,
                    reply_markup=create_rating_keyboard(story_id),
                    parse_mode='HTML'
                )
            except telegram.error.BadRequest as e:
                if "Message too long" in str(e) or len(text) > 4096:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...
                    parts = [text[i:i+4096] for i in range(0, len(text), 4096)]
                    for i, part in enumerate(parts):
                        if i == 0:
                            await query.edit_message_text(
                                text=part,
                                reply_markup=create_rating_keyboard(story_id) if i == len(parts)-1 else None,
                                parse_mode='HTML'
                            )
                        else:
                            await query.message.reply_text(
                                text=part,
                                reply_markup=create_rating_keyboard(story_id) if i == len(parts)-1 else None,
                                parse_mode='HTML'
                            )
        elif query.data == 'select':
            await query.answer()
            await show_stories_menu(query)
        elif query.data.startswith('rate_'):
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏: {query.data}")
            try:
                # –ò–∑–º–µ–Ω—è–µ–º —Å–ø–æ—Å–æ–± —Ä–∞–∑–±–æ–∞ –¥–∞–Ω–Ω—ã—Ö
                # –§–æ—Ä–º–∞—Ç: rate_story-id_rating
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –æ—Ü–µ–Ω–∫—É, –∞ –≤—Å—ë –º–µ–∂–¥—É rate_ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º _ –∫–∞–∫ id –∏—Å—Ç–æ—Ä–∏–∏
                parts = query.data.split('_')
                if len(parts) < 3:
                    logging.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∏: {len(parts)}")
                    await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∏")
                    return
                
                rating = parts[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - –æ—Ü–µ–Ω–∫–∞
                story_id = '_'.join(parts[1:-1])  # –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º - id –∏—Å—Ç–æ—Ä–∏–∏
                
                logging.info(f"–†–∞–∑–±–æ—Ä –æ—Ü–µ–Ω–∫–∏: story_id={story_id}, rating={rating}")
                
                try:
                    rating = int(rating)
                except ValueError:
                    logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏: {rating}")
                    await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏")
                    return
                
                if rating < 1 or rating > 5:
                    logging.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏: {rating}")
                    await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏")
                    return
                
                # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                ratings = load_ratings()
                if story_id not in ratings:
                    ratings[story_id] = {
                        'votes': [],
                        'user_votes': {}
                    }
                elif 'user_votes' not in ratings[story_id]:
                    ratings[story_id]['user_votes'] = {}
                
                user_id = str(query.from_user.id)
                
                if user_id in ratings[story_id]['user_votes']:
                    old_rating = ratings[story_id]['user_votes'][user_id]
                    if old_rating == rating:
                        await query.answer("–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–∞–∫—É—é –æ—Ü–µ–Ω–∫—É!")
                        return
                    if old_rating in ratings[story_id]['votes']:
                        ratings[story_id]['votes'].remove(old_rating)
                
                ratings[story_id]['votes'].append(rating)
                ratings[story_id]['user_votes'][user_id] = rating
                
                save_ratings(ratings)
                
                avg_rating, votes = get_average_rating(story_id)
                await query.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f} ({votes} –≥–æ–ª–æ—Å–æ–≤)")
                
                await query.edit_message_reply_markup(
                    reply_markup=create_rating_keyboard(story_id)
                )
                
            except Exception as e:
                logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏: {e}")
                await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏")
        elif query.data.startswith('dummy_'):
            await query.answer("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞")
        else:
            await query.answer()
            file_path = os.path.join(STORIES_DIR, f"{query.data}.html")
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {file_path}")
            
            if not os.path.exists(file_path):
                logging.error(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
                await query.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            text = read_html_file(file_path)
            
            if not text:
                logging.error("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏")
                await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
                return
            
            try:
                await query.edit_message_text(
                    text=text,
                    reply_markup=create_rating_keyboard(query.data),
                    parse_mode='HTML'
                )
                logging.info("–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            except telegram.error.BadRequest as e:
                if "Message too long" in str(e) or len(text) > 4096:
                    logging.info("–†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏")
                    parts = [text[i:i+4096] for i in range(0, len(text), 4096)]
                    for i, part in enumerate(parts):
                        if i == 0:
                            await query.edit_message_text(
                                text=part,
                                reply_markup=create_rating_keyboard(query.data) if i == len(parts)-1 else None,
                                parse_mode='HTML'
                            )
                        else:
                            await query.message.reply_text(
                                text=part,
                                reply_markup=create_rating_keyboard(query.data) if i == len(parts)-1 else None,
                                parse_mode='HTML'
                            )
                else:
                    raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ BadRequest
                    
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {str(e)}")
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def main() -> None:
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–∞—á–∞ –µ–º—É —Ç–æ–∫–µ–Ω–∞ API
    application = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
